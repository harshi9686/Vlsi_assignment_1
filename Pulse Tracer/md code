// Code your design here
module pulse_detector (
    input  wire clk,
    input  wire rst,
    input  wire noisy_in,
    output reg  pulse_out
);

    parameter integer STABLE_COUNT = 4;

    reg [2:0] shift_reg;
    reg [$clog2(STABLE_COUNT+1)-1:0] count;
    reg clean_in, prev_clean;

    // Noise filter (shift register-based)
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            shift_reg <= 3'b000;
            count     <= 0;
            clean_in  <= 0;
        end else begin
            shift_reg <= {shift_reg[1:0], noisy_in};

            // Check if input is stable
            if (&shift_reg == 1) begin
                if (count < STABLE_COUNT)
                    count <= count + 1;
            end else if (~|shift_reg) begin
                if (count < STABLE_COUNT)
                    count <= count + 1;
            end else begin
                count <= 0;
            end

            if (count == STABLE_COUNT)
                clean_in <= shift_reg[2];
        end
    end

    // Rising edge detector
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            prev_clean <= 0;
            pulse_out  <= 0;
        end else begin
            pulse_out  <= (clean_in & ~prev_clean);
            prev_clean <= clean_in;
        end
    end

endmodule
